<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game of Thrones - Personagens</title>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Montserrat:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        /* ...seu CSS permanece igual... */
        /* (copie o CSS do seu arquivo original aqui) */
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1 class="logo">Game of Thrones</h1>
            <p class="subtitle">Personagens de Westeros e Essos</p>
        </header>
        
        <div class="filter-container">
            <button class="filter-btn active" data-house="all">Todos</button>
            <button class="filter-btn" data-house="Stark">Casa Stark</button>
            <button class="filter-btn" data-house="Lannister">Casa Lannister</button>
            <button class="filter-btn" data-house="Targaryen">Casa Targaryen</button>
            <button class="filter-btn" data-house="Baratheon">Casa Baratheon</button>
        </div>
        
        <div id="characters-container" class="character-grid">
            <div class="loading">Carregando personagens...</div>
        </div>
        
        <footer>
            <p>Â© 2023 Game of Thrones - Sistema de InformaÃ§Ãµes. Todos os direitos reservados.</p>
            <p>Este Ã© um projeto nÃ£o oficial para fins educacionais.</p>
        </footer>
    </div>

    <script>
        // FunÃ§Ã£o para buscar personagens da API
        async function fetchCharacters() {
            try {
                const response = await fetch('https://thronesapi.com/api/v2/Characters');
                const characters = await response.json();
                return characters;
            } catch (error) {
                console.error('Erro ao buscar personagens:', error);
                return [];
            }
        }

        // FunÃ§Ã£o para exibir os personagens
        function displayCharacters(characters) {
            const container = document.getElementById('characters-container');
            container.innerHTML = ''; // Limpa o conteÃºdo de carregamento
            
            characters.forEach(character => {
                const house = character.family || 'Unknown';
                const proxiedUrl = character.imageUrl
                  ? `https://images.weserv.nl/?url=${encodeURIComponent(character.imageUrl.replace(/^https?:\\/\\//, ''))}`
                  : null;

                const imageHtml = proxiedUrl
                  ? `<img src="${proxiedUrl}" alt="${character.fullName}" class="character-image" onerror="this.onerror=null;this.style.display='none';this.insertAdjacentHTML('afterend', '<div class=\\'fallback-image\\'>ðŸ‘‘</div>');">`
                  : `<div class="fallback-image">ðŸ‘‘</div>`;

                const card = document.createElement('div');
                card.className = 'character-card';
                card.setAttribute('data-house', house.replace('House ', '').split(' ')[0]);
                
                card.innerHTML = `
                    ${imageHtml}
                    <div class="character-info">
                        <h2 class="character-name">${character.fullName}</h2>
                        <span class="character-house">${house}</span>
                        <div class="character-details">
                            <p><strong>TÃ­tulo:</strong> ${character.title || 'Desconhecido'}</p>
                            <p><strong>Familia:</strong> ${house}</p>
                        </div>
                    </div>
                `;
                
                container.appendChild(card);
            });
            
            // Adiciona os event listeners para os filtros
            setupFilters();
        }

        // Configura os filtros
        function setupFilters() {
            const filterButtons = document.querySelectorAll('.filter-btn');
            const characterCards = document.querySelectorAll('.character-card');
            
            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove a classe active de todos os botÃµes
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    // Adiciona a classe active ao botÃ£o clicado
                    button.classList.add('active');
                    
                    const house = button.getAttribute('data-house');
                    
                    characterCards.forEach(card => {
                        if (house === 'all' || card.getAttribute('data-house') === house) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });
        }

        // Inicializa a aplicaÃ§Ã£o
        document.addEventListener('DOMContentLoaded', async () => {
            const characters = await fetchCharacters();
            displayCharacters(characters);
        });
    </script>
</body>
</html>